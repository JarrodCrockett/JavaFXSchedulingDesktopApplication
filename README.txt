Scheduling Desktop Application
The purpose of the application is to provide appointment scheduling for customers.
The user is able to keep track and log appointments as well as current customer records.
All information is added, updated and deleted from the database.

Created by Jarrod Crockett

-Contact Information-
Email - jarrod212@hotmail.com
Application Version - 1.3
Date - 03-14-2021

IntelliJ Community 2020.3
JDK Amazon Corretto 11 version 11.0.10
JavaFX-SDK-11.0.2
mysql:mysql-contactor-java-8.0.22
JUnit-5.7.0

The program will run by adding a path variable of
--module-path ${PATH_TO_FX} --add-modules javafx.swing,javafx.graphics,javafx.fxml,javafx.media,javafx.web,javafx.controls
to the run configuration.
Then add PATH_TO_FX under settings to javaFX file location under settings path variable.

The database connector can be downloaded using maven using mysql connector java version 8.0.22

The application will open to a login screen that will have to be supplied with a correct user name and password.
A test user has been created using user name: test and password: test

The main screen of the application will load and allow access to table views of current and past appointments as well as customers.
The main screen gives Add, Update, and Delete functionality by loading new screen displays for data entry.

Three separate reports can be generated by clicking buttons across the bottom of the page.
The contact report creates a view that will allow you to select each contact and view appointments by contact name.
The customer report shows total number of customers by appointment type and month.
The division report shows a list of customers from each division. It will allow you to view them from country and by state/province.

A log file keeps track of user logins with the user name and a time stamp.

A javadoc has been created to use the methods and functionality of the application.

The application will save and update information as the user interacts with appointments and customers received from the database.
The table views in the application are updated while interacting with the application.
